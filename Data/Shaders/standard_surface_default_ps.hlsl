// Generated by JHQ using MaterialXGenHlsl 

struct BSDF { float3 response; float3 throughput; float thickness; float ior; };
#define EDF float3
struct surfaceshader { float3 color; float3 transparency; };
struct volumeshader { float3 color; float3 transparency; };
struct displacementshader { float3 offset; float scale; };
struct lightshader { float3 intensity; float3 direction; };
#define material surfaceshader

// Uniform block: PrivateUniforms
cbuffer PrivateUniforms_pixel : register(b1)
{
    float4x4 u_envMatrix;
    int u_envRadianceMips;
    int u_envRadianceSamples;
    bool u_refractionEnv;
    float3 u_refractionColor;
    float3 u_viewPosition;
    int u_numActiveLightSources;
};
Texture2D u_envRadiance : register(t0);
Texture2D u_envIrradiance : register(t1);

// Uniform block: PublicUniforms
cbuffer PublicUniforms_pixel : register(b2)
{
    displacementshader displacementshader1;
    float SR_default_base;
    float3 SR_default_base_color;
    float SR_default_diffuse_roughness;
    float SR_default_metalness;
    float SR_default_specular;
    float3 SR_default_specular_color;
    float SR_default_specular_roughness;
    float SR_default_specular_IOR;
    float SR_default_specular_anisotropy;
    float SR_default_specular_rotation;
    float SR_default_transmission;
    float3 SR_default_transmission_color;
    float SR_default_transmission_depth;
    float3 SR_default_transmission_scatter;
    float SR_default_transmission_scatter_anisotropy;
    float SR_default_transmission_dispersion;
    float SR_default_transmission_extra_roughness;
    float SR_default_subsurface;
    float3 SR_default_subsurface_color;
    float3 SR_default_subsurface_radius;
    float SR_default_subsurface_scale;
    float SR_default_subsurface_anisotropy;
    float SR_default_sheen;
    float3 SR_default_sheen_color;
    float SR_default_sheen_roughness;
    float SR_default_coat;
    float3 SR_default_coat_color;
    float SR_default_coat_roughness;
    float SR_default_coat_anisotropy;
    float SR_default_coat_rotation;
    float SR_default_coat_IOR;
    float SR_default_coat_affect_color;
    float SR_default_coat_affect_roughness;
    float SR_default_thin_film_thickness;
    float SR_default_thin_film_IOR;
    float SR_default_emission;
    float3 SR_default_emission_color;
    float3 SR_default_opacity;
    bool SR_default_thin_walled;
};

struct VertexData
{
    float3 normalWorld : NORMAL;
    float3 tangentWorld : TANGENT;
    float3 positionWorld : POSITION;
};

static VertexData vd;

#define M_FLOAT_EPS 1e-8

float mx_square(float x)
{
    return x*x;
}

float2 mx_square(float2 x)
{
    return x*x;
}

float3 mx_square(float3 x)
{
    return x*x;
}

#define DIRECTIONAL_ALBEDO_METHOD 0

#define MAX_LIGHT_SOURCES 3
#define M_PI 3.1415926535897932
#define M_PI_INV (1.0 / M_PI)

float mx_pow5(float x)
{
    return mx_square(mx_square(x)) * x;
}

// Standard Schlick Fresnel
float mx_fresnel_schlick(float cosTheta, float F0)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return F0 + (1.0 - F0) * x5;
}
float3 mx_fresnel_schlick(float cosTheta, float3 F0)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return F0 + (1.0 - F0) * x5;
}

// Generalized Schlick Fresnel
float mx_fresnel_schlick(float cosTheta, float F0, float F90)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return lerp(F0, F90, x5);
}
float3 mx_fresnel_schlick(float cosTheta, float3 F0, float3 F90)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return lerp(F0, F90, x5);
}

// Generalized Schlick Fresnel with a variable exponent
float mx_fresnel_schlick(float cosTheta, float F0, float F90, float exponent)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    return lerp(F0, F90, pow(x, exponent));
}
float3 mx_fresnel_schlick(float cosTheta, float3 F0, float3 F90, float exponent)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    return lerp(F0, F90, pow(x, exponent));
}

// Enforce that the given normal is forward-facing from the specified view direction.
float3 mx_forward_facing_normal(float3 N, float3 V)
{
    return (dot(N, V) < 0.0) ? -N : N;
}

// https://www.graphics.rwth-aachen.de/publication/2/jgt.pdf
float mx_golden_ratio_sequence(int i)
{
    const float GOLDEN_RATIO = 1.6180339887498948;
    return frac((float(i) + 1.0) * GOLDEN_RATIO);
}

// https://people.irisa.fr/Ricardo.Marques/articles/2013/SF_CGF.pdf
float2 mx_spherical_fibonacci(int i, int numSamples)
{
    return float2((float(i) + 0.5) / float(numSamples), mx_golden_ratio_sequence(i));
}

// Generate a uniform-weighted sample in the unit hemisphere.
float3 mx_uniform_sample_hemisphere(float2 Xi)
{
    float phi = 2.0 * M_PI * Xi.x;
    float cosTheta = 1.0 - Xi.y;
    float sinTheta = sqrt(1.0 - mx_square(cosTheta));
    return float3(cos(phi) * sinTheta,
                sin(phi) * sinTheta,
                cosTheta);
}

// Fresnel model options.
static int FRESNEL_MODEL_DIELECTRIC = 0;
static int FRESNEL_MODEL_CONDUCTOR = 1;
static int FRESNEL_MODEL_SCHLICK = 2;
static int FRESNEL_MODEL_AIRY = 3;
static int FRESNEL_MODEL_SCHLICK_AIRY = 4;

// XYZ to CIE 1931 RGB color space (using neutral E illuminant)
static float3x3 XYZ_TO_RGB = float3x3(2.3706743, -0.5138850, 0.0052982, -0.9000405, 1.4253036, -0.0146949, -0.4706338, 0.0885814, 1.0093968);

// Parameters for Fresnel calculations.
struct FresnelData
{
    int model;

    // Physical Fresnel
    float3 ior;
    float3 extinction;

    // Generalized Schlick Fresnel
    float3 F0;
    float3 F90;
    float exponent;

    // Thin film
    float tf_thickness;
    float tf_ior;

    // Refraction
    bool refraction;
};

// https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf
// Appendix B.2 Equation 13
float mx_ggx_NDF(float3 H, float2 alpha)
{
    float2 He = H.xy / alpha;
    float denom = dot(He, He) + mx_square(H.z);
    return 1.0 / (M_PI * alpha.x * alpha.y * mx_square(denom));
}

// https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf
// Appendix B.1 Equation 3
float mx_ggx_PDF(float3 H, float LdotH, float2 alpha)
{
    float NdotH = H.z;
    return mx_ggx_NDF(H, alpha) * NdotH / (4.0 * LdotH);
}

// https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf
// Appendix B.2 Equation 15
float3 mx_ggx_importance_sample_NDF(float2 Xi, float2 alpha)
{
    float phi = 2.0 * M_PI * Xi.x;
    float tanTheta = sqrt(Xi.y / (1.0 - Xi.y));
    float3 H = float3(tanTheta * alpha.x * cos(phi),
                  tanTheta * alpha.y * sin(phi),
                  1.0);
    return normalize(H);
}

// http://jcgt.org/published/0007/04/01/paper.pdf
// Appendix A Listing 1
float3 mx_ggx_importance_sample_VNDF(float2 Xi, float3 V, float2 alpha)
{
    // Transform the view direction to the hemisphere configuration.
    V = normalize(float3(V.xy * alpha, V.z));

    // Construct an orthonormal basis from the view direction.
    float len = length(V.xy);
    float3 T1 = (len > 0.0) ? float3(-V.y, V.x, 0.0) / len : float3(1.0, 0.0, 0.0);
    float3 T2 = cross(V, T1);

    // Parameterization of the projected area.
    float r = sqrt(Xi.y);
    float phi = 2.0 * M_PI * Xi.x;
    float t1 = r * cos(phi);
    float t2 = r * sin(phi);
    float s = 0.5 * (1.0 + V.z);
    t2 = (1.0 - s) * sqrt(1.0 - mx_square(t1)) + s * t2;

    // Reprojection onto hemisphere.
    float3 H = t1 * T1 + t2 * T2 + sqrt(max(0.0, 1.0 - mx_square(t1) - mx_square(t2))) * V;

    // Transform the microfacet normal back to the ellipsoid configuration.
    H = normalize(float3(H.xy * alpha, max(H.z, 0.0)));

    return H;
}

// https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf
// Equation 34
float mx_ggx_smith_G1(float cosTheta, float alpha)
{
    float cosTheta2 = mx_square(cosTheta);
    float tanTheta2 = (1.0 - cosTheta2) / cosTheta2;
    return 2.0 / (1.0 + sqrt(1.0 + mx_square(alpha) * tanTheta2));
}

// Height-correlated Smith masking-shadowing
// http://jcgt.org/published/0003/02/03/paper.pdf
// Equations 72 and 99
float mx_ggx_smith_G2(float NdotL, float NdotV, float alpha)
{
    float alpha2 = mx_square(alpha);
    float lambdaL = sqrt(alpha2 + (1.0 - alpha2) * mx_square(NdotL));
    float lambdaV = sqrt(alpha2 + (1.0 - alpha2) * mx_square(NdotV));
    return 2.0 / (lambdaL / NdotL + lambdaV / NdotV);
}

// Rational quadratic fit to Monte Carlo data for GGX directional albedo.
float3 mx_ggx_dir_albedo_analytic(float NdotV, float alpha, float3 F0, float3 F90)
{
    float x = NdotV;
    float y = alpha;
    float x2 = mx_square(x);
    float y2 = mx_square(y);
    float4 r = float4(0.1003, 0.9345, 1.0, 1.0) +
             float4(-0.6303, -2.323, -1.765, 0.2281) * x +
             float4(9.748, 2.229, 8.263, 15.94) * y +
             float4(-2.038, -3.748, 11.53, -55.83) * x * y +
             float4(29.34, 1.424, 28.96, 13.08) * x2 +
             float4(-8.245, -0.7684, -7.507, 41.26) * y2 +
             float4(-26.44, 1.436, -36.11, 54.9) * x2 * y +
             float4(19.99, 0.2913, 15.86, 300.2) * x * y2 +
             float4(-5.448, 0.6286, 33.37, -285.1) * x2 * y2;
    float2 AB = clamp(r.xy / r.zw, 0.0, 1.0);
    return F0 * AB.x + F90 * AB.y;
}

float3 mx_ggx_dir_albedo_table_lookup(float NdotV, float alpha, float3 F0, float3 F90)
{
#if DIRECTIONAL_ALBEDO_METHOD == 1
    if (textureSize(u_albedoTable, 0).x > 1)
    {
        float2 AB = texture(u_albedoTable, float2(NdotV, alpha)).rg;
        return F0 * AB.x + F90 * AB.y;
    }
#endif
    return (float3)0.0;
}

// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
float3 mx_ggx_dir_albedo_monte_carlo(float NdotV, float alpha, float3 F0, float3 F90)
{
    NdotV = clamp(NdotV, M_FLOAT_EPS, 1.0);
    float3 V = float3(sqrt(1.0 - mx_square(NdotV)), 0, NdotV);

    float2 AB = (float2)0.0;
    const int SAMPLE_COUNT = 64;
    for (int i = 0; i < SAMPLE_COUNT; i++)
    {
        float2 Xi = mx_spherical_fibonacci(i, SAMPLE_COUNT);

        // Compute the half vector and incoming light direction.
        float3 H = mx_ggx_importance_sample_VNDF(Xi, V, (float2)(alpha));
        float3 L = -reflect(V, H);
        
        // Compute dot products for this sample.
        float NdotL = clamp(L.z, M_FLOAT_EPS, 1.0);
        float VdotH = clamp(dot(V, H), M_FLOAT_EPS, 1.0);

        // Compute the Fresnel term.
        float Fc = mx_fresnel_schlick(VdotH, 0.0, 1.0);

        // Compute the per-sample geometric term.
        // https://hal.inria.fr/hal-00996995v2/document, Algorithm 2
        float G2 = mx_ggx_smith_G2(NdotL, NdotV, alpha);
        
        // Add the contribution of this sample.
        AB += float2(G2 * (1.0 - Fc), G2 * Fc);
    }

    // Apply the global component of the geometric term and normalize.
    AB /= mx_ggx_smith_G1(NdotV, alpha) * float(SAMPLE_COUNT);

    // Return the final directional albedo.
    return F0 * AB.x + F90 * AB.y;
}

float3 mx_ggx_dir_albedo(float NdotV, float alpha, float3 F0, float3 F90)
{
#if DIRECTIONAL_ALBEDO_METHOD == 0
    return mx_ggx_dir_albedo_analytic(NdotV, alpha, F0, F90);
#elif DIRECTIONAL_ALBEDO_METHOD == 1
    return mx_ggx_dir_albedo_table_lookup(NdotV, alpha, F0, F90);
#else
    return mx_ggx_dir_albedo_monte_carlo(NdotV, alpha, F0, F90);
#endif
}

float mx_ggx_dir_albedo(float NdotV, float alpha, float F0, float F90)
{
    return mx_ggx_dir_albedo(NdotV, alpha, (float3)(F0), (float3)(F90)).x;
}

// https://blog.selfshadow.com/publications/turquin/ms_comp_final.pdf
// Equations 14 and 16
float3 mx_ggx_energy_compensation(float NdotV, float alpha, float3 Fss)
{
    float Ess = mx_ggx_dir_albedo(NdotV, alpha, 1.0, 1.0);
    return 1.0 + Fss * (1.0 - Ess) / Ess;
}

float mx_ggx_energy_compensation(float NdotV, float alpha, float Fss)
{
    return mx_ggx_energy_compensation(NdotV, alpha, (float3)(Fss)).x;
}

// Compute the average of an anisotropic alpha pair.
float mx_average_alpha(float2 alpha)
{
    return sqrt(alpha.x * alpha.y);
}

// Convert a real-valued index of refraction to normal-incidence reflectivity.
float mx_ior_to_f0(float ior)
{
    return mx_square((ior - 1.0) / (ior + 1.0));
}

// Convert normal-incidence reflectivity to real-valued index of refraction.
float mx_f0_to_ior(float F0)
{
    float sqrtF0 = sqrt(clamp(F0, 0.01, 0.99));
    return (1.0 + sqrtF0) / (1.0 - sqrtF0);
}

float3 mx_f0_to_ior_colored(float3 F0)
{
    float3 sqrtF0 = sqrt(clamp(F0, 0.01, 0.99));
    return ((float3)(1.0) + sqrtF0) / ((float3)(1.0) - sqrtF0);
}

// https://seblagarde.wordpress.com/2013/04/29/memo-on-fresnel-equations/
float mx_fresnel_dielectric(float cosTheta, float ior)
{
    if (cosTheta < 0.0)
        return 1.0;

    float g =  ior*ior + cosTheta*cosTheta - 1.0;
    // Check for total internal reflection
    if (g < 0.0)
        return 1.0;

    g = sqrt(g);
    float gmc = g - cosTheta;
    float gpc = g + cosTheta;
    float x = gmc / gpc;
    float y = (gpc * cosTheta - 1.0) / (gmc * cosTheta + 1.0);
    return 0.5 * x * x * (1.0 + y * y);
}

void mx_fresnel_dielectric_polarized(float cosTheta, float n, out float Rp, out float Rs)
{
    if (cosTheta < 0.0) {
        Rp = 1.0;
        Rs = 1.0;
        return;
    }

    float cosTheta2 = cosTheta * cosTheta;
    float sinTheta2 = 1.0 - cosTheta2;
    float n2 = n * n;

    float t0 = n2 - sinTheta2;
    float a2plusb2 = sqrt(t0 * t0);
    float t1 = a2plusb2 + cosTheta2;
    float a = sqrt(max(0.5 * (a2plusb2 + t0), 0.0));
    float t2 = 2.0 * a * cosTheta;
    Rs = (t1 - t2) / (t1 + t2);

    float t3 = cosTheta2 * a2plusb2 + sinTheta2 * sinTheta2;
    float t4 = t2 * sinTheta2;
    Rp = Rs * (t3 - t4) / (t3 + t4);
}

void mx_fresnel_dielectric_polarized(float cosTheta, float eta1, float eta2, out float Rp, out float Rs)
{
    float n = eta2 / eta1;
    mx_fresnel_dielectric_polarized(cosTheta, n, Rp, Rs);
}

void mx_fresnel_conductor_polarized(float cosTheta, float3 n, float3 k, out float3 Rp, out float3 Rs)
{
    cosTheta = clamp(cosTheta, 0.0, 1.0);
    float cosTheta2 = cosTheta * cosTheta;
    float sinTheta2 = 1.0 - cosTheta2;
    float3 n2 = n * n;
    float3 k2 = k * k;

    float3 t0 = n2 - k2 - (float3)(sinTheta2);
    float3 a2plusb2 = sqrt(t0 * t0 + 4.0 * n2 * k2);
    float3 t1 = a2plusb2 + (float3)(cosTheta2);
    float3 a = sqrt(max(0.5 * (a2plusb2 + t0), 0.0));
    float3 t2 = 2.0 * a * cosTheta;
    Rs = (t1 - t2) / (t1 + t2);

    float3 t3 = cosTheta2 * a2plusb2 + (float3)(sinTheta2 * sinTheta2);
    float3 t4 = t2 * sinTheta2;
    Rp = Rs * (t3 - t4) / (t3 + t4);
}

void mx_fresnel_conductor_polarized(float cosTheta, float eta1, float3 eta2, float3 kappa2, out float3 Rp, out float3 Rs)
{
    float3 n = eta2 / eta1;
    float3 k = kappa2 / eta1;
    mx_fresnel_conductor_polarized(cosTheta, n, k, Rp, Rs);
}

float3 mx_fresnel_conductor(float cosTheta, float3 n, float3 k)
{
    float3 Rp, Rs;
    mx_fresnel_conductor_polarized(cosTheta, n, k, Rp, Rs);
    return 0.5 * (Rp  + Rs);
}

// Phase shift due to a dielectric material
void mx_fresnel_dielectric_phase_polarized(float cosTheta, float eta1, float eta2, out float phiP, out float phiS)
{
    float cosB = cos(atan(eta2 / eta1));    // Brewster's angle
    if (eta2 > eta1) {
        phiP = cosTheta < cosB ? M_PI : 0.0f;
        phiS = 0.0f;
    } else {
        phiP = cosTheta < cosB ? 0.0f : M_PI;
        phiS = M_PI;
    }
}

// Phase shift due to a conducting material
void mx_fresnel_conductor_phase_polarized(float cosTheta, float eta1, float3 eta2, float3 kappa2, out float3 phiP, out float3 phiS)
{
    if (all(kappa2 == float3(0, 0, 0)) && eta2.x == eta2.y && eta2.y == eta2.z) {
        // Use dielectric formula to increase performance
        mx_fresnel_dielectric_phase_polarized(cosTheta, eta1, eta2.x, phiP.x, phiS.x);
        phiP = phiP.xxx;
        phiS = phiS.xxx;
        return;
    }
    float3 k2 = kappa2 / eta2;
    float3 sinThetaSqr = (float3)(1.0) - cosTheta * cosTheta;
    float3 A = eta2*eta2*((float3)(1.0)-k2*k2) - eta1*eta1*sinThetaSqr;
    float3 B = sqrt(A*A + mx_square(2.0*eta2*eta2*k2));
    float3 U = sqrt((A+B)/2.0);
    float3 V = max((float3)(0.0), sqrt((B-A)/2.0));

    phiS = atan2(2.0*eta1*V*cosTheta, U*U + V*V - mx_square(eta1*cosTheta));
    phiP = atan2(2.0*eta1*eta2*eta2*cosTheta * (2.0*k2*U - ((float3)(1.0)-k2*k2) * V),
                mx_square(eta2*eta2*((float3)(1.0)+k2*k2)*cosTheta) - eta1*eta1*(U*U+V*V));
}

// Evaluation XYZ sensitivity curves in Fourier space
float3 mx_eval_sensitivity(float opd, float3 shift)
{
    // Use Gaussian fits, given by 3 parameters: val, pos and var
    float phase = 2.0*M_PI * opd;
    float3 val = float3(5.4856e-13, 4.4201e-13, 5.2481e-13);
    float3 pos = float3(1.6810e+06, 1.7953e+06, 2.2084e+06);
    float3 var = float3(4.3278e+09, 9.3046e+09, 6.6121e+09);
    float3 xyz = val * sqrt(2.0*M_PI * var) * cos(pos * phase + shift) * exp(- var * phase*phase);
    xyz.x   += 9.7470e-14 * sqrt(2.0*M_PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(- 4.5282e+09 * phase*phase);
    return xyz / 1.0685e-7;
}

// A Practical Extension to Microfacet Theory for the Modeling of Varying Iridescence
// https://belcour.github.io/blog/research/publication/2017/05/01/brdf-thin-film.html
float3 mx_fresnel_airy(float cosTheta, float3 ior, float3 extinction, float tf_thickness, float tf_ior,
                                     float3 f0, float3 f90, float exponent, bool use_schlick)
{
    // Convert nm -> m
    float d = tf_thickness * 1.0e-9;

    // Assume vacuum on the outside
    float eta1 = 1.0;
    float eta2 = max(tf_ior, eta1);
    float3 eta3   = use_schlick ? mx_f0_to_ior_colored(f0) : ior;
    float3 kappa3 = use_schlick ? (float3)(0.0)                : extinction;

    // Compute the Spectral versions of the Fresnel reflectance and
    // transmitance for each interface.
    float R12p, T121p, R12s, T121s;
    float3 R23p, R23s;
    
    // Reflected and transmitted parts in the thin film
    mx_fresnel_dielectric_polarized(cosTheta, eta1, eta2, R12p, R12s);

    // Reflected part by the base
    float scale = eta1 / eta2;
    float cosThetaTSqr = 1.0 - (1.0-cosTheta*cosTheta) * scale*scale;
    float cosTheta2 = sqrt(cosThetaTSqr);
    if (use_schlick)
    {
        float3 f = mx_fresnel_schlick(cosTheta2, f0, f90, exponent);
        R23p = 0.5 * f;
        R23s = 0.5 * f;
    }
    else
    {
        mx_fresnel_conductor_polarized(cosTheta2, eta2, eta3, kappa3, R23p, R23s);
    }

    // Check for total internal reflection
    if (cosThetaTSqr <= 0.0f)
    {
        R12s = 1.0;
        R12p = 1.0;
    }

    // Compute the transmission coefficients
    T121p = 1.0 - R12p;
    T121s = 1.0 - R12s;

    // Optical path difference
    float D = 2.0 * eta2 * d * cosTheta2;
    float3 Dphi = 2.0 * M_PI * D / float3(580.0, 550.0, 450.0);

    float phi21p, phi21s;
    float3 phi23p, phi23s, r123s, r123p;

    // Evaluate the phase shift
    mx_fresnel_dielectric_phase_polarized(cosTheta, eta1, eta2, phi21p, phi21s);
    if (use_schlick)
    {
        phi23p = float3(
            (eta3[0] < eta2) ? M_PI : 0.0,
            (eta3[1] < eta2) ? M_PI : 0.0,
            (eta3[2] < eta2) ? M_PI : 0.0);
        phi23s = phi23p;
    }
    else
    {
        mx_fresnel_conductor_phase_polarized(cosTheta2, eta2, eta3, kappa3, phi23p, phi23s);
    }

    phi21p = M_PI - phi21p;
    phi21s = M_PI - phi21s;

    r123p = max((float3)(0.0), sqrt(R12p*R23p));
    r123s = max((float3)(0.0), sqrt(R12s*R23s));

    // Evaluate iridescence term
    float3 I = (float3)(0.0);
    float3 C0, Cm, Sm;

    // Iridescence term using spectral antialiasing for Parallel polarization

    float3 S0 = (float3)(1.0);

    // Reflectance term for m=0 (DC term amplitude)
    float3 Rs = (T121p*T121p*R23p) / ((float3)(1.0) - R12p*R23p);
    C0 = R12p + Rs;
    I += C0 * S0;

    // Reflectance term for m>0 (pairs of diracs)
    Cm = Rs - T121p;
    for (int m=1; m<=2; ++m)
    {
        Cm *= r123p;
        Sm  = 2.0 * mx_eval_sensitivity(float(m)*D, float(m)*(phi23p+(float3)(phi21p)));
        I  += Cm*Sm;
    }

    // Iridescence term using spectral antialiasing for Perpendicular polarization

    // Reflectance term for m=0 (DC term amplitude)
    float3 Rp = (T121s*T121s*R23s) / ((float3)(1.0) - R12s*R23s);
    C0 = R12s + Rp;
    I += C0 * S0;

    // Reflectance term for m>0 (pairs of diracs)
    Cm = Rp - T121s ;
    for (int m=1; m<=2; ++m)
    {
        Cm *= r123s;
        Sm  = 2.0 * mx_eval_sensitivity(float(m)*D, float(m)*(phi23s+(float3)(phi21s)));
        I  += Cm*Sm;
    }

    // Average parallel and perpendicular polarization
    I *= 0.5;

    // Convert back to RGB reflectance
    I = clamp(mul(I, XYZ_TO_RGB), (float3)0.0, (float3)1.0);

    return I;
}

FresnelData mx_init_fresnel_data(int model)
{
    FresnelData o = {model, (float3)(0.0), (float3)(0.0), (float3)(0.0), (float3)(0.0), 0.0, 0.0, 0.0, false};
    return o;
}

FresnelData mx_init_fresnel_dielectric(float ior)
{
    FresnelData fd = mx_init_fresnel_data(FRESNEL_MODEL_DIELECTRIC);
    fd.ior = (float3)(ior);
    return fd;
}

FresnelData mx_init_fresnel_conductor(float3 ior, float3 extinction)
{
    FresnelData fd = mx_init_fresnel_data(FRESNEL_MODEL_CONDUCTOR);
    fd.ior = ior;
    fd.extinction = extinction;
    return fd;
}

FresnelData mx_init_fresnel_schlick(float3 F0)
{
    FresnelData fd = mx_init_fresnel_data(FRESNEL_MODEL_SCHLICK);
    fd.F0 = F0;
    fd.F90 = (float3)(1.0);
    fd.exponent = 5.0f;
    return fd;
}

FresnelData mx_init_fresnel_schlick(float3 F0, float3 F90, float exponent)
{
    FresnelData fd = mx_init_fresnel_data(FRESNEL_MODEL_SCHLICK);
    fd.F0 = F0;
    fd.F90 = F90;
    fd.exponent = exponent;
    return fd;
}

FresnelData mx_init_fresnel_schlick_airy(float3 F0, float3 F90, float exponent, float tf_thickness, float tf_ior)
{
    FresnelData fd = mx_init_fresnel_data(FRESNEL_MODEL_SCHLICK_AIRY);
    fd.F0 = F0;
    fd.F90 = F90;
    fd.exponent = exponent;
    fd.tf_thickness = tf_thickness;
    fd.tf_ior = tf_ior;
    return fd;
}

FresnelData mx_init_fresnel_dielectric_airy(float ior, float tf_thickness, float tf_ior)
{
    FresnelData fd = mx_init_fresnel_data(FRESNEL_MODEL_AIRY);
    fd.ior = (float3)(ior);
    fd.tf_thickness = tf_thickness;
    fd.tf_ior = tf_ior;
    return fd;
}

FresnelData mx_init_fresnel_conductor_airy(float3 ior, float3 extinction, float tf_thickness, float tf_ior)
{
    FresnelData fd = mx_init_fresnel_data(FRESNEL_MODEL_AIRY);
    fd.ior = ior;
    fd.extinction = extinction;
    fd.tf_thickness = tf_thickness;
    fd.tf_ior = tf_ior;
    return fd;
}

float3 mx_compute_fresnel(float cosTheta, FresnelData fd)
{
    if (fd.model == FRESNEL_MODEL_DIELECTRIC)
    {
        return (float3)(mx_fresnel_dielectric(cosTheta, fd.ior.x));
    }
    else if (fd.model == FRESNEL_MODEL_CONDUCTOR)
    {
        return mx_fresnel_conductor(cosTheta, fd.ior, fd.extinction);
    }
    else if (fd.model == FRESNEL_MODEL_SCHLICK)
    {
        return mx_fresnel_schlick(cosTheta, fd.F0, fd.F90, fd.exponent);
    }
    else
    {
        return mx_fresnel_airy(cosTheta, fd.ior, fd.extinction, fd.tf_thickness, fd.tf_ior,
                                         fd.F0, fd.F90, fd.exponent,
                                         fd.model == FRESNEL_MODEL_SCHLICK_AIRY);
    }
}

// Compute the refraction of a ray through a solid sphere.
float3 mx_refraction_solid_sphere(float3 R, float3 N, float ior)
{
    R = refract(R, N, 1.0 / ior);
    float3 N1 = normalize(R * dot(R, N) - N * 0.5);
    return refract(R, N1, ior);
}

float2 mx_latlong_projection(float3 dir)
{
    float latitude = -asin(dir.y) * M_PI_INV + 0.5;
    float longitude = atan2(dir.x, -dir.z) * M_PI_INV * 0.5 + 0.5;
    return float2(longitude, latitude);
}

SamplerState s;
float3 mx_latlong_map_lookup(float3 dir, float4x4 transform, float lod, Texture2D envSampler)
{
    float3 envDir = normalize(mul(float4(dir,0.0), transform).xyz);
    float2 uv = mx_latlong_projection(envDir);
    return envSampler.SampleLevel(s, uv, lod).rgb;
}

// https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html
// Section 20.4 Equation 13
float mx_latlong_compute_lod(float3 dir, float pdf, float maxMipLevel, int envSamples)
{
    const float MIP_LEVEL_OFFSET = 1.5;
    float effectiveMaxMipLevel = maxMipLevel - MIP_LEVEL_OFFSET;
    float distortion = sqrt(1.0 - mx_square(dir.y));
    return max(effectiveMaxMipLevel - 0.5 * log2(float(envSamples) * pdf * distortion), 0.0);
}

float3 mx_environment_radiance(float3 N, float3 V, float3 X, float2 alpha, int distribution, FresnelData fd)
{
    // Generate tangent frame.
    float3 Y = normalize(cross(N, X));
    X = cross(Y, N);
    float3x3 tangentToWorld = float3x3(X, Y, N);

    // Transform the view vector to tangent space.
    V = float3(dot(V, X), dot(V, Y), dot(V, N));

    // Compute derived properties.
    float NdotV = clamp(V.z, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(alpha);
    
    // Integrate outgoing radiance using filtered importance sampling.
    // http://cgg.mff.cuni.cz/~jaroslav/papers/2008-egsr-fis/2008-egsr-fis-final-embedded.pdf
    float3 radiance = (float3)0.0;
    int envRadianceSamples = u_envRadianceSamples;
    for (int i = 0; i < envRadianceSamples; i++)
    {
        float2 Xi = mx_spherical_fibonacci(i, envRadianceSamples);

        // Compute the half vector and incoming light direction.
        float3 H = mx_ggx_importance_sample_NDF(Xi, alpha);
        float3 L = fd.refraction ? mx_refraction_solid_sphere(-V, H, fd.ior.x) : -reflect(V, H);
        
        // Compute dot products for this sample.
        float NdotH = clamp(H.z, M_FLOAT_EPS, 1.0);
        float NdotL = clamp(L.z, M_FLOAT_EPS, 1.0);
        float VdotH = clamp(dot(V, H), M_FLOAT_EPS, 1.0);
        float LdotH = VdotH;

        // Sample the environment light from the given direction.
        float3 Lw = mul(L, tangentToWorld);
        float pdf = mx_ggx_PDF(H, LdotH, alpha);
        float lod = mx_latlong_compute_lod(Lw, pdf, float(u_envRadianceMips - 1), envRadianceSamples);
        float3 sampleColor = mx_latlong_map_lookup(Lw, u_envMatrix, lod, u_envRadiance);

        // Compute the Fresnel term.
        float3 F = mx_compute_fresnel(VdotH, fd);

        // Compute the geometric term.
        float G = mx_ggx_smith_G2(NdotL, NdotV, avgAlpha);

        // Compute the combined FG term, which is inverted for refraction.
        float3 FG = fd.refraction ? (float3)(1.0) - (F * G) : F * G;

        // Add the radiance contribution of this sample.
        // From https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
        //   incidentLight = sampleColor * NdotL
        //   microfacetSpecular = D * F * G / (4 * NdotL * NdotV)
        //   pdf = D * NdotH / (4 * VdotH)
        //   radiance = incidentLight * microfacetSpecular / pdf
        radiance += sampleColor * FG * VdotH / (NdotV * NdotH);
    }

    // Normalize and return the final radiance.
    radiance /= float(envRadianceSamples);
    return radiance;
}

float3 mx_environment_irradiance(float3 N)
{
    return mx_latlong_map_lookup(N, u_envMatrix, 0.0, u_envIrradiance);
}


float3 mx_surface_transmission(float3 N, float3 V, float3 X, float2 alpha, int distribution, FresnelData fd)
{
    float3 transmission;
    if (u_refractionEnv)
    {
        // Approximate the appearance of surface transmission as glossy
        // environment map refraction, ignoring any scene geometry that might
        // be visible through the surface.
        fd.refraction = true;
        transmission = mx_environment_radiance(N, V, X, alpha, distribution, fd);
    }
    else
    {
        transmission = u_refractionColor;
    }

    return transmission;
}

struct LightData
{
    float3 direction;
    float3 color;
    int type;
    float intensity;
    float pad0;
    float pad1;
};

cbuffer LightData_pixel : register(b3)
{
    LightData u_lightData[MAX_LIGHT_SOURCES];
};

void mx_directional_light(LightData light, float3 position, out lightshader result)
{
    result.direction = -light.direction;
    result.intensity = light.color * light.intensity;
}

int numActiveLightSources()
{
    return min(u_numActiveLightSources, MAX_LIGHT_SOURCES) ;
}

void sampleLightSource(LightData light, float3 position, out lightshader result)
{
    result.intensity = (float3)0.0;
    result.direction = (float3)0.0;
    if (light.type == 1)
    {
        mx_directional_light(light, position, result);
    }
}

void mx_roughness_anisotropy(float roughness, float anisotropy, out float2 result)
{
    float roughness_sqr = clamp(roughness*roughness, M_FLOAT_EPS, 1.0);
    if (anisotropy > 0.0)
    {
        float aspect = sqrt(1.0 - clamp(anisotropy, 0.0, 0.98));
        result.x = min(roughness_sqr / aspect, 1.0);
        result.y = roughness_sqr * aspect;
    }
    else
    {
        result.x = roughness_sqr;
        result.y = roughness_sqr;
    }
}


// http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf
// Equation 2
float mx_imageworks_sheen_NDF(float NdotH, float roughness)
{
    float invRoughness = 1.0 / max(roughness, 0.005);
    float cos2 = NdotH * NdotH;
    float sin2 = 1.0 - cos2;
    return (2.0 + invRoughness) * pow(sin2, invRoughness * 0.5) / (2.0 * M_PI);
}

float mx_imageworks_sheen_brdf(float NdotL, float NdotV, float NdotH, float roughness)
{
    // Microfacet distribution.
    float D = mx_imageworks_sheen_NDF(NdotH, roughness);

    // Fresnel and geometry terms are ignored.
    float F = 1.0;
    float G = 1.0;

    // We use a smoother denominator, as in:
    // https://blog.selfshadow.com/publications/s2013-shading-course/rad/s2013_pbs_rad_notes.pdf
    return D * F * G / (4.0 * (NdotL + NdotV - NdotL*NdotV));
}

// Rational quadratic fit to Monte Carlo data for Imageworks sheen directional albedo.
float mx_imageworks_sheen_dir_albedo_analytic(float NdotV, float roughness)
{
    float2 r = float2(13.67300, 1.0) +
             float2(-68.78018, 61.57746) * NdotV +
             float2(799.08825, 442.78211) * roughness +
             float2(-905.00061, 2597.49308) * NdotV * roughness +
             float2(60.28956, 121.81241) * mx_square(NdotV) +
             float2(1086.96473, 3045.55075) * mx_square(roughness);
    return r.x / r.y;
}

float mx_imageworks_sheen_dir_albedo_table_lookup(float NdotV, float roughness)
{
#if DIRECTIONAL_ALBEDO_METHOD == 1
    if (textureSize(u_albedoTable, 0).x > 1)
    {
        return texture(u_albedoTable, float2(NdotV, roughness)).b;
    }
#endif
    return 0.0;
}

float mx_imageworks_sheen_dir_albedo_monte_carlo(float NdotV, float roughness)
{
    NdotV = clamp(NdotV, M_FLOAT_EPS, 1.0);
    float3 V = float3(sqrt(1.0f - mx_square(NdotV)), 0, NdotV);

    float radiance = 0.0;
    const int SAMPLE_COUNT = 64;
    for (int i = 0; i < SAMPLE_COUNT; i++)
    {
        float2 Xi = mx_spherical_fibonacci(i, SAMPLE_COUNT);

        // Compute the incoming light direction and half vector.
        float3 L = mx_uniform_sample_hemisphere(Xi);
        float3 H = normalize(L + V);
        
        // Compute dot products for this sample.
        float NdotL = clamp(L.z, M_FLOAT_EPS, 1.0);
        float NdotH = clamp(H.z, M_FLOAT_EPS, 1.0);

        // Compute sheen reflectance.
        float reflectance = mx_imageworks_sheen_brdf(NdotL, NdotV, NdotH, roughness);

        // Add the radiance contribution of this sample.
        //   uniform_pdf = 1 / (2 * PI)
        //   radiance = reflectance * NdotL / uniform_pdf;
        radiance += reflectance * NdotL * 2.0 * M_PI;
    }

    // Return the final directional albedo.
    return radiance / float(SAMPLE_COUNT);
}

float mx_imageworks_sheen_dir_albedo(float NdotV, float roughness)
{
#if DIRECTIONAL_ALBEDO_METHOD == 0
    float dirAlbedo = mx_imageworks_sheen_dir_albedo_analytic(NdotV, roughness);
#elif DIRECTIONAL_ALBEDO_METHOD == 1
    float dirAlbedo = mx_imageworks_sheen_dir_albedo_table_lookup(NdotV, roughness);
#else
    float dirAlbedo = mx_imageworks_sheen_dir_albedo_monte_carlo(NdotV, roughness);
#endif
    return clamp(dirAlbedo, 0.0, 1.0);
}

void mx_sheen_bsdf_reflection(float3 L, float3 V, float3 P, float occlusion, float weight, float3 color, float roughness, float3 N, inout BSDF bsdf)
{
    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    N = mx_forward_facing_normal(N, V);

    float3 H = normalize(L + V);

    float NdotL = clamp(dot(N, L), M_FLOAT_EPS, 1.0);
    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);
    float NdotH = clamp(dot(N, H), M_FLOAT_EPS, 1.0);

    float3 fr = color * mx_imageworks_sheen_brdf(NdotL, NdotV, NdotH, roughness);
    float dirAlbedo = mx_imageworks_sheen_dir_albedo(NdotV, roughness);
    bsdf.throughput = (float3)(1.0 - dirAlbedo * weight);

    // We need to include NdotL from the light integral here
    // as in this case it's not cancelled out by the BRDF denominator.
    bsdf.response = fr * NdotL * occlusion * weight;
}

void mx_sheen_bsdf_indirect(float3 V, float weight, float3 color, float roughness, float3 N, inout BSDF bsdf)
{
    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    N = mx_forward_facing_normal(N, V);

    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);

    float dirAlbedo = mx_imageworks_sheen_dir_albedo(NdotV, roughness);
    bsdf.throughput = (float3)(1.0 - dirAlbedo * weight);

    float3 Li = mx_environment_irradiance(N);
    bsdf.response = Li * color * dirAlbedo * weight;
}

void mx_luminance_color3(float3 _in, float3 lumacoeffs, out float3 result)
{
    result = (float3)(dot(_in, lumacoeffs));
}

float4x4 mx_rotationMatrix(float3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return float4x4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

void mx_rotate_vector3(float3 _in, float amount, float3 axis, out float3 result)
{
    float rotationRadians = radians(amount);
    float4x4 m = mx_rotationMatrix(axis, rotationRadians);
    result = mul(float4(_in, 1.0), m).xyz;
}

void mx_artistic_ior(float3 reflectivity, float3 edge_color, out float3 ior, out float3 extinction)
{
    // "Artist Friendly Metallic Fresnel", Ole Gulbrandsen, 2014
    // http://jcgt.org/published/0003/04/03/paper.pdf

    float3 r = clamp(reflectivity, 0.0, 0.99);
    float3 r_sqrt = sqrt(r);
    float3 n_min = (1.0 - r) / (1.0 + r);
    float3 n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
    ior = lerp(n_max, n_min, edge_color);

    float3 np1 = ior + 1.0;
    float3 nm1 = ior - 1.0;
    float3 k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
    k2 = max(k2, 0.0);
    extinction = sqrt(k2);
}

void mx_uniform_edf(float3 N, float3 L, float3 color, out EDF result)
{
    result = color;
}


void mx_dielectric_bsdf_reflection(float3 L, float3 V, float3 P, float occlusion, float weight, float3 tint, float ior, float2 roughness, float3 N, float3 X, int distribution, int scatter_mode, inout BSDF bsdf)
{
    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    N = mx_forward_facing_normal(N, V);

    float3 Y = normalize(cross(N, X));
    float3 H = normalize(L + V);

    float NdotL = clamp(dot(N, L), M_FLOAT_EPS, 1.0);
    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);
    float VdotH = clamp(dot(V, H), M_FLOAT_EPS, 1.0);

    float2 safeAlpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(safeAlpha);
    float3 Ht = float3(dot(H, X), dot(H, Y), dot(H, N));

    FresnelData fd;
    if (bsdf.thickness > 0.0)
    { 
        fd = mx_init_fresnel_dielectric_airy(ior, bsdf.thickness, bsdf.ior);
    }
    else
    {
        fd = mx_init_fresnel_dielectric(ior);
    }
    float3  F = mx_compute_fresnel(VdotH, fd);
    float D = mx_ggx_NDF(Ht, safeAlpha);
    float G = mx_ggx_smith_G2(NdotL, NdotV, avgAlpha);

    float F0 = mx_ior_to_f0(ior);
    float3 comp = mx_ggx_energy_compensation(NdotV, avgAlpha, F);
    float3 dirAlbedo = mx_ggx_dir_albedo(NdotV, avgAlpha, F0, 1.0) * comp;
    bsdf.throughput = 1.0 - dirAlbedo * weight;

    // Note: NdotL is cancelled out
    bsdf.response = D * F * G * comp * tint * occlusion * weight / (4.0 * NdotV);
}

void mx_dielectric_bsdf_transmission(float3 V, float weight, float3 tint, float ior, float2 roughness, float3 N, float3 X, int distribution, int scatter_mode, inout BSDF bsdf)
{
    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    N = mx_forward_facing_normal(N, V);
    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);

    FresnelData fd;
    if (bsdf.thickness > 0.0)
    { 
        fd = mx_init_fresnel_dielectric_airy(ior, bsdf.thickness, bsdf.ior);
    }
    else
    {
        fd = mx_init_fresnel_dielectric(ior);
    }
    float3 F = mx_compute_fresnel(NdotV, fd);

    float2 safeAlpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(safeAlpha);

    float F0 = mx_ior_to_f0(ior);
    float3 comp = mx_ggx_energy_compensation(NdotV, avgAlpha, F);
    float3 dirAlbedo = mx_ggx_dir_albedo(NdotV, avgAlpha, F0, 1.0) * comp;
    bsdf.throughput = 1.0 - dirAlbedo * weight;

    if (scatter_mode != 0)
    {
        bsdf.response = mx_surface_transmission(N, V, X, safeAlpha, distribution, fd) * tint * weight;
    }
}

void mx_dielectric_bsdf_indirect(float3 V, float weight, float3 tint, float ior, float2 roughness, float3 N, float3 X, int distribution, int scatter_mode, inout BSDF bsdf)
{
    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    N = mx_forward_facing_normal(N, V);

    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);

    FresnelData fd;
    if (bsdf.thickness > 0.0)
    { 
        fd = mx_init_fresnel_dielectric_airy(ior, bsdf.thickness, bsdf.ior);
    }
    else
    {
        fd = mx_init_fresnel_dielectric(ior);
    }
    float3 F = mx_compute_fresnel(NdotV, fd);

    float2 safeAlpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(safeAlpha);

    float F0 = mx_ior_to_f0(ior);
    float3 comp = mx_ggx_energy_compensation(NdotV, avgAlpha, F);
    float3 dirAlbedo = mx_ggx_dir_albedo(NdotV, avgAlpha, F0, 1.0) * comp;
    bsdf.throughput = 1.0 - dirAlbedo * weight;

    float3 Li = mx_environment_radiance(N, V, X, safeAlpha, distribution, fd);
    bsdf.response = Li * tint * comp * weight;
}


void mx_conductor_bsdf_reflection(float3 L, float3 V, float3 P, float occlusion, float weight, float3 ior_n, float3 ior_k, float2 roughness, float3 N, float3 X, int distribution, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    N = mx_forward_facing_normal(N, V);

    float3 Y = normalize(cross(N, X));
    float3 H = normalize(L + V);

    float NdotL = clamp(dot(N, L), M_FLOAT_EPS, 1.0);
    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);
    float VdotH = clamp(dot(V, H), M_FLOAT_EPS, 1.0);

    float2 safeAlpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(safeAlpha);
    float3 Ht = float3(dot(H, X), dot(H, Y), dot(H, N));

    FresnelData fd;
    if (bsdf.thickness > 0.0)
        fd = mx_init_fresnel_conductor_airy(ior_n, ior_k, bsdf.thickness, bsdf.ior);
    else
        fd = mx_init_fresnel_conductor(ior_n, ior_k);

    float3 F = mx_compute_fresnel(VdotH, fd);
    float D = mx_ggx_NDF(Ht, safeAlpha);
    float G = mx_ggx_smith_G2(NdotL, NdotV, avgAlpha);

    float3 comp = mx_ggx_energy_compensation(NdotV, avgAlpha, F);

    // Note: NdotL is cancelled out
    bsdf.response = D * F * G * comp * occlusion * weight / (4.0 * NdotV);
}

void mx_conductor_bsdf_indirect(float3 V, float weight, float3 ior_n, float3 ior_k, float2 roughness, float3 N, float3 X, int distribution, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    N = mx_forward_facing_normal(N, V);

    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);

    FresnelData fd;
    if (bsdf.thickness > 0.0)
        fd = mx_init_fresnel_conductor_airy(ior_n, ior_k, bsdf.thickness, bsdf.ior);
    else
        fd = mx_init_fresnel_conductor(ior_n, ior_k);

    float3 F = mx_compute_fresnel(NdotV, fd);

    float2 safeAlpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(safeAlpha);
    float3 comp = mx_ggx_energy_compensation(NdotV, avgAlpha, F);

    float3 Li = mx_environment_radiance(N, V, X, safeAlpha, distribution, fd);

    bsdf.response = Li * comp * weight;
}

// We fake diffuse transmission by using diffuse reflection from the opposite side.
// So this BTDF is really a BRDF.
void mx_translucent_bsdf_reflection(float3 L, float3 V, float3 P, float occlusion, float weight, float3 color, float3 normal, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    // Invert normal since we're transmitting light from the other side
    float NdotL = dot(L, -normal);
    if (NdotL <= 0.0 || weight < M_FLOAT_EPS)
    {
        return;
    }

    bsdf.response = color * weight * NdotL * M_PI_INV;
}

void mx_translucent_bsdf_indirect(float3 V, float weight, float3 color, float3 normal, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    // Invert normal since we're transmitting light from the other side
    float3 Li = mx_environment_irradiance(-normal);
    bsdf.response = Li * color * weight;
}


// Based on the OSL implementation of Oren-Nayar diffuse, which is in turn
// based on https://mimosa-pudica.net/improved-oren-nayar.html.
float mx_oren_nayar_diffuse(float3 L, float3 V, float3 N, float NdotL, float roughness)
{
    float LdotV = clamp(dot(L, V), M_FLOAT_EPS, 1.0);
    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);
    float s = LdotV - NdotL * NdotV;
    float stinv = (s > 0.0f) ? s / max(NdotL, NdotV) : 0.0;

    float sigma2 = mx_square(roughness * M_PI);
    float A = 1.0 - 0.5 * (sigma2 / (sigma2 + 0.33));
    float B = 0.45 * sigma2 / (sigma2 + 0.09);

    return A + B * stinv;
}

// https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf
// Section 5.3
float mx_burley_diffuse(float3 L, float3 V, float3 N, float NdotL, float roughness)
{
    float3 H = normalize(L + V);
    float LdotH = clamp(dot(L, H), M_FLOAT_EPS, 1.0);
    float NdotV = clamp(dot(N, V), M_FLOAT_EPS, 1.0);

    float F90 = 0.5 + (2.0 * roughness * mx_square(LdotH));
    float refL = mx_fresnel_schlick(NdotL, 1.0, F90);
    float refV = mx_fresnel_schlick(NdotV, 1.0, F90);
    return refL * refV;
}

// Compute the directional albedo component of Burley diffuse for the given
// view angle and roughness.  Curve fit provided by Stephen Hill.
float mx_burley_diffuse_dir_albedo(float NdotV, float roughness)
{
    float x = NdotV;
    float fit0 = 0.97619 - 0.488095 * mx_pow5(1.0 - x);
    float fit1 = 1.55754 + (-2.02221 + (2.56283 - 1.06244 * x) * x) * x;
    return lerp(fit0, fit1, roughness);
}

// Evaluate the Burley diffusion profile for the given distance and diffusion shape.
// Based on https://graphics.pixar.com/library/ApproxBSSRDF/
float3 mx_burley_diffusion_profile(float dist, float3 shape)
{
    float3 num1 = exp(-shape * dist);
    float3 num2 = exp(-shape * dist / 3.0);
    float denom = max(dist, M_FLOAT_EPS);
    return (num1 + num2) / denom;
}

// Integrate the Burley diffusion profile over a sphere of the given radius.
// Inspired by Eric Penner's presentation in http://advances.realtimerendering.com/s2011/
float3 mx_integrate_burley_diffusion(float3 N, float3 L, float radius, float3 mfp)
{
    float theta = acos(dot(N, L));

    // Estimate the Burley diffusion shape from mean free path.
    float3 shape = (float3)(1.0) / max(mfp, 0.1);

    // Integrate the profile over the sphere.
    float3 sumD = (float3)0.0;
    float3 sumR = (float3)0.0;
    const int SAMPLE_COUNT = 32;
    const float SAMPLE_WIDTH = (2.0 * M_PI) / float(SAMPLE_COUNT);
    for (int i = 0; i < SAMPLE_COUNT; i++)
    {
        float x = -M_PI + (float(i) + 0.5) * SAMPLE_WIDTH;
        float dist = radius * abs(2.0 * sin(x * 0.5));
        float3 R = mx_burley_diffusion_profile(dist, shape);
        sumD += R * max(cos(theta + x), 0.0);
        sumR += R;
    }

    return sumD / sumR;
}

float3 mx_subsurface_scattering_approx(float3 N, float3 L, float3 P, float3 albedo, float3 mfp)
{
    float curvature = length(fwidth(N)) / length(fwidth(P));
    float radius = 1.0 / max(curvature, 0.01);
    return albedo * mx_integrate_burley_diffusion(N, L, radius, mfp) / (float3)(M_PI);
}

void mx_subsurface_bsdf_reflection(float3 L, float3 V, float3 P, float occlusion, float weight, float3 color, float3 radius, float anisotropy, float3 normal, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    normal = mx_forward_facing_normal(normal, V);

    float3 sss = mx_subsurface_scattering_approx(normal, L, P, color, radius);
    float NdotL = clamp(dot(normal, L), M_FLOAT_EPS, 1.0);
    float visibleOcclusion = 1.0 - NdotL * (1.0 - occlusion);
    bsdf.response = sss * visibleOcclusion * weight;
}

void mx_subsurface_bsdf_indirect(float3 V, float weight, float3 color, float3 radius, float anisotropy, float3 normal, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    normal = mx_forward_facing_normal(normal, V);

    // For now, we render indirect subsurface as simple indirect diffuse.
    float3 Li = mx_environment_irradiance(normal);
    bsdf.response = Li * color * weight;
}


void mx_oren_nayar_diffuse_bsdf_reflection(float3 L, float3 V, float3 P, float occlusion, float weight, float3 color, float roughness, float3 normal, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    normal = mx_forward_facing_normal(normal, V);

    float NdotL = clamp(dot(normal, L), M_FLOAT_EPS, 1.0);

    bsdf.response = color * occlusion * weight * NdotL * M_PI_INV;
    if (roughness > 0.0)
    {
        bsdf.response *= mx_oren_nayar_diffuse(L, V, normal, NdotL, roughness);
    }
}

void mx_oren_nayar_diffuse_bsdf_indirect(float3 V, float weight, float3 color, float roughness, float3 normal, inout BSDF bsdf)
{
    bsdf.throughput = (float3)0.0;

    if (weight < M_FLOAT_EPS)
    {
        return;
    }

    normal = mx_forward_facing_normal(normal, V);

    float3 Li = mx_environment_irradiance(normal);
    bsdf.response = Li * color * weight;
}

void NG_standard_surface_surfaceshader_100(float base, float3 base_color, float diffuse_roughness, float metalness, float specular, float3 specular_color, float specular_roughness, float specular_IOR, float specular_anisotropy, float specular_rotation, float transmission, float3 transmission_color, float transmission_depth, float3 transmission_scatter, float transmission_scatter_anisotropy, float transmission_dispersion, float transmission_extra_roughness, float subsurface, float3 subsurface_color, float3 subsurface_radius, float subsurface_scale, float subsurface_anisotropy, float sheen, float3 sheen_color, float sheen_roughness, float coat, float3 coat_color, float coat_roughness, float coat_anisotropy, float coat_rotation, float coat_IOR, float3 coat_normal, float coat_affect_color, float coat_affect_roughness, float thin_film_thickness, float thin_film_IOR, float emission, float3 emission_color, float3 opacity, bool thin_walled, float3 normal, float3 tangent, out surfaceshader out1)
{
    float2 coat_roughness_vector_out = (float2)0.0;
    mx_roughness_anisotropy(coat_roughness, coat_anisotropy, coat_roughness_vector_out);
    const float coat_tangent_rotate_degree_in2_tmp = 360.000000;
    float coat_tangent_rotate_degree_out = coat_rotation * coat_tangent_rotate_degree_in2_tmp;
    float3 metal_reflectivity_out = base_color * base;
    float3 metal_edgecolor_out = specular_color * specular;
    float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
    const float tangent_rotate_degree_in2_tmp = 360.000000;
    float tangent_rotate_degree_out = specular_rotation * tangent_rotate_degree_in2_tmp;
    float transmission_roughness_add_out = specular_roughness + transmission_extra_roughness;
    const float subsurface_color_nonnegative_in2_tmp = 0.000000;
    float3 subsurface_color_nonnegative_out = max(subsurface_color, subsurface_color_nonnegative_in2_tmp);
    const float coat_clamped_low_tmp = 0.000000;
    const float coat_clamped_high_tmp = 1.000000;
    float coat_clamped_out = clamp(coat, coat_clamped_low_tmp, coat_clamped_high_tmp);
    float3 subsurface_radius_vector_out = float3(subsurface_radius.x, subsurface_radius.y, subsurface_radius.z);
    float subsurface_selector_out = float(thin_walled);
    const float base_color_nonnegative_in2_tmp = 0.000000;
    float3 base_color_nonnegative_out = max(base_color, base_color_nonnegative_in2_tmp);
    const float3 coat_attenuation_bg_tmp = float3(1.000000, 1.000000, 1.000000);
    float3 coat_attenuation_out = lerp(coat_attenuation_bg_tmp, coat_color, coat);
    float3 emission_weight_out = emission_color * emission;
    const float3 coat_emission_attenuation_bg_tmp = float3(1.000000, 1.000000, 1.000000);
    float3 coat_emission_attenuation_out = lerp(coat_emission_attenuation_bg_tmp, coat_color, coat);
    float3 opacity_luminance_out = (float3)0.0;
    mx_luminance_color3(opacity, float3(0.272229, 0.674082, 0.053689), opacity_luminance_out);
    float3 coat_tangent_rotate_out = (float3)0.0;
    mx_rotate_vector3(tangent, coat_tangent_rotate_degree_out, coat_normal, coat_tangent_rotate_out);
    float3 artistic_ior_ior = (float3)0.0;
    float3 artistic_ior_extinction = (float3)0.0;
    mx_artistic_ior(metal_reflectivity_out, metal_edgecolor_out, artistic_ior_ior, artistic_ior_extinction);
    float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
    float3 tangent_rotate_out = (float3)0.0;
    mx_rotate_vector3(tangent, tangent_rotate_degree_out, normal, tangent_rotate_out);
    const float transmission_roughness_clamped_low_tmp = 0.000000;
    const float transmission_roughness_clamped_high_tmp = 1.000000;
    float transmission_roughness_clamped_out = clamp(transmission_roughness_add_out, transmission_roughness_clamped_low_tmp, transmission_roughness_clamped_high_tmp);
    float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
    float3 subsurface_radius_scaled_out = subsurface_radius_vector_out * subsurface_scale;
    float3 emission_weight_attenuated_out = emission_weight_out * coat_emission_attenuation_out;
    float3 coat_tangent_rotate_normalize_out = normalize(coat_tangent_rotate_out);
    const float coat_affected_roughness_fg_tmp = 1.000000;
    float coat_affected_roughness_out = lerp(specular_roughness, coat_affected_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
    float3 tangent_rotate_normalize_out = normalize(tangent_rotate_out);
    const float coat_affected_transmission_roughness_fg_tmp = 1.000000;
    float coat_affected_transmission_roughness_out = lerp(transmission_roughness_clamped_out, coat_affected_transmission_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
    const float coat_gamma_in2_tmp = 1.000000;
    float coat_gamma_out = coat_gamma_multiply_out + coat_gamma_in2_tmp;
    float3 coat_tangent_out = (float3)0.0;
    if (coat_anisotropy > 0.000000)
    {
        coat_tangent_out = coat_tangent_rotate_normalize_out;
    }
    else
    {
        coat_tangent_out = tangent;
    }
    float2 main_roughness_out = (float2)0.0;
    mx_roughness_anisotropy(coat_affected_roughness_out, specular_anisotropy, main_roughness_out);
    float3 main_tangent_out = (float3)0.0;
    if (specular_anisotropy > 0.000000)
    {
        main_tangent_out = tangent_rotate_normalize_out;
    }
    else
    {
        main_tangent_out = tangent;
    }
    float2 transmission_roughness_out = (float2)0.0;
    mx_roughness_anisotropy(coat_affected_transmission_roughness_out, specular_anisotropy, transmission_roughness_out);
    float3 coat_affected_subsurface_color_out = pow(subsurface_color_nonnegative_out, (float3)(coat_gamma_out));
    float3 coat_affected_diffuse_color_out = pow(base_color_nonnegative_out, (float3)(coat_gamma_out));
    surfaceshader shader_constructor_out = {(float3)0.0,(float3)0.0};
    {
        float3 N = normalize(vd.normalWorld);
        float3 V = normalize(u_viewPosition - vd.positionWorld);
        float3 P = vd.positionWorld;

        float surfaceOpacity = opacity_luminance_out.x;

        // Shadow occlusion
        float occlusion = 1.0;

        // Light loop
        int numLights = numActiveLightSources();
        lightshader lightShader;
        for (int activeLightIndex = 0; activeLightIndex < numLights; ++activeLightIndex)
        {
            sampleLightSource(u_lightData[activeLightIndex], vd.positionWorld, lightShader);
            float3 L = lightShader.direction;

            // Calculate the BSDF response for this light source
            BSDF coat_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_dielectric_bsdf_reflection(L, V, P, occlusion, coat, float3(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, coat_normal, coat_tangent_out, 0, 0, coat_bsdf_out);
            BSDF metal_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            metal_bsdf_out.thickness = thin_film_thickness;
            metal_bsdf_out.ior = thin_film_IOR;
            mx_conductor_bsdf_reflection(L, V, P, occlusion, 1.000000, artistic_ior_ior, artistic_ior_extinction, main_roughness_out, normal, main_tangent_out, 0, metal_bsdf_out);
            BSDF specular_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            specular_bsdf_out.thickness = thin_film_thickness;
            specular_bsdf_out.ior = thin_film_IOR;
            mx_dielectric_bsdf_reflection(L, V, P, occlusion, specular, specular_color, specular_IOR, main_roughness_out, normal, main_tangent_out, 0, 0, specular_bsdf_out);
            BSDF transmission_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            BSDF sheen_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_sheen_bsdf_reflection(L, V, P, occlusion, sheen, sheen_color, sheen_roughness, normal, sheen_bsdf_out);
            BSDF translucent_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_translucent_bsdf_reflection(L, V, P, occlusion, 1.000000, coat_affected_subsurface_color_out, normal, translucent_bsdf_out);
            BSDF subsurface_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_subsurface_bsdf_reflection(L, V, P, occlusion, 1.000000, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal, subsurface_bsdf_out);
            BSDF selected_subsurface_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            selected_subsurface_bsdf_out.response = lerp(subsurface_bsdf_out.response, translucent_bsdf_out.response, subsurface_selector_out);
            selected_subsurface_bsdf_out.throughput = lerp(subsurface_bsdf_out.throughput, translucent_bsdf_out.throughput, subsurface_selector_out);
            BSDF diffuse_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_oren_nayar_diffuse_bsdf_reflection(L, V, P, occlusion, base, coat_affected_diffuse_color_out, diffuse_roughness, normal, diffuse_bsdf_out);
            BSDF subsurface_mix_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            subsurface_mix_out.response = lerp(diffuse_bsdf_out.response, selected_subsurface_bsdf_out.response, subsurface);
            subsurface_mix_out.throughput = lerp(diffuse_bsdf_out.throughput, selected_subsurface_bsdf_out.throughput, subsurface);
            BSDF sheen_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            sheen_layer_out.response = sheen_bsdf_out.response + subsurface_mix_out.response * sheen_bsdf_out.throughput;
            sheen_layer_out.throughput = sheen_bsdf_out.throughput * subsurface_mix_out.throughput;
            BSDF transmission_mix_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            transmission_mix_out.response = lerp(sheen_layer_out.response, transmission_bsdf_out.response, transmission);
            transmission_mix_out.throughput = lerp(sheen_layer_out.throughput, transmission_bsdf_out.throughput, transmission);
            BSDF specular_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            specular_layer_out.response = specular_bsdf_out.response + transmission_mix_out.response * specular_bsdf_out.throughput;
            specular_layer_out.throughput = specular_bsdf_out.throughput * transmission_mix_out.throughput;
            BSDF thin_film_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            thin_film_layer_out.response = lerp(specular_layer_out.response, metal_bsdf_out.response, metalness);
            thin_film_layer_out.throughput = lerp(specular_layer_out.throughput, metal_bsdf_out.throughput, metalness);
            float3 thin_film_layer_attenuated_out_in2_clamped = clamp(coat_attenuation_out, 0.0, 1.0);
            BSDF thin_film_layer_attenuated_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            thin_film_layer_attenuated_out.response = thin_film_layer_out.response * thin_film_layer_attenuated_out_in2_clamped;
            thin_film_layer_attenuated_out.throughput = thin_film_layer_out.throughput * thin_film_layer_attenuated_out_in2_clamped;
            BSDF coat_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            coat_layer_out.response = coat_bsdf_out.response + thin_film_layer_attenuated_out.response * coat_bsdf_out.throughput;
            coat_layer_out.throughput = coat_bsdf_out.throughput * thin_film_layer_attenuated_out.throughput;

            // Accumulate the light's contribution
            shader_constructor_out.color += lightShader.intensity * coat_layer_out.response;
        }

        // Ambient occlusion
        occlusion = 1.0;

        // Add environment contribution
        {
            BSDF coat_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_dielectric_bsdf_indirect(V, coat, float3(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, coat_normal, coat_tangent_out, 0, 0, coat_bsdf_out);
            BSDF metal_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            metal_bsdf_out.thickness = thin_film_thickness;
            metal_bsdf_out.ior = thin_film_IOR;
            mx_conductor_bsdf_indirect(V, 1.000000, artistic_ior_ior, artistic_ior_extinction, main_roughness_out, normal, main_tangent_out, 0, metal_bsdf_out);
            BSDF specular_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            specular_bsdf_out.thickness = thin_film_thickness;
            specular_bsdf_out.ior = thin_film_IOR;
            mx_dielectric_bsdf_indirect(V, specular, specular_color, specular_IOR, main_roughness_out, normal, main_tangent_out, 0, 0, specular_bsdf_out);
            BSDF transmission_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            BSDF sheen_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_sheen_bsdf_indirect(V, sheen, sheen_color, sheen_roughness, normal, sheen_bsdf_out);
            BSDF translucent_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_translucent_bsdf_indirect(V, 1.000000, coat_affected_subsurface_color_out, normal, translucent_bsdf_out);
            BSDF subsurface_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_subsurface_bsdf_indirect(V, 1.000000, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal, subsurface_bsdf_out);
            BSDF selected_subsurface_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            selected_subsurface_bsdf_out.response = lerp(subsurface_bsdf_out.response, translucent_bsdf_out.response, subsurface_selector_out);
            selected_subsurface_bsdf_out.throughput = lerp(subsurface_bsdf_out.throughput, translucent_bsdf_out.throughput, subsurface_selector_out);
            BSDF diffuse_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_oren_nayar_diffuse_bsdf_indirect(V, base, coat_affected_diffuse_color_out, diffuse_roughness, normal, diffuse_bsdf_out);
            BSDF subsurface_mix_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            subsurface_mix_out.response = lerp(diffuse_bsdf_out.response, selected_subsurface_bsdf_out.response, subsurface);
            subsurface_mix_out.throughput = lerp(diffuse_bsdf_out.throughput, selected_subsurface_bsdf_out.throughput, subsurface);
            BSDF sheen_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            sheen_layer_out.response = sheen_bsdf_out.response + subsurface_mix_out.response * sheen_bsdf_out.throughput;
            sheen_layer_out.throughput = sheen_bsdf_out.throughput * subsurface_mix_out.throughput;
            BSDF transmission_mix_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            transmission_mix_out.response = lerp(sheen_layer_out.response, transmission_bsdf_out.response, transmission);
            transmission_mix_out.throughput = lerp(sheen_layer_out.throughput, transmission_bsdf_out.throughput, transmission);
            BSDF specular_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            specular_layer_out.response = specular_bsdf_out.response + transmission_mix_out.response * specular_bsdf_out.throughput;
            specular_layer_out.throughput = specular_bsdf_out.throughput * transmission_mix_out.throughput;
            BSDF thin_film_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            thin_film_layer_out.response = lerp(specular_layer_out.response, metal_bsdf_out.response, metalness);
            thin_film_layer_out.throughput = lerp(specular_layer_out.throughput, metal_bsdf_out.throughput, metalness);
            float3 thin_film_layer_attenuated_out_in2_clamped = clamp(coat_attenuation_out, 0.0, 1.0);
            BSDF thin_film_layer_attenuated_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            thin_film_layer_attenuated_out.response = thin_film_layer_out.response * thin_film_layer_attenuated_out_in2_clamped;
            thin_film_layer_attenuated_out.throughput = thin_film_layer_out.throughput * thin_film_layer_attenuated_out_in2_clamped;
            BSDF coat_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            coat_layer_out.response = coat_bsdf_out.response + thin_film_layer_attenuated_out.response * coat_bsdf_out.throughput;
            coat_layer_out.throughput = coat_bsdf_out.throughput * thin_film_layer_attenuated_out.throughput;

            shader_constructor_out.color += occlusion * coat_layer_out.response;
        }

        // Add surface emission
        {
            EDF emission_edf_out = (EDF)0.0;
            mx_uniform_edf(N, V, emission_weight_attenuated_out, emission_edf_out);
            shader_constructor_out.color += emission_edf_out;
        }

        // Calculate the BSDF transmission for viewing direction
        {
            BSDF coat_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_dielectric_bsdf_transmission(V, coat, float3(1.000000, 1.000000, 1.000000), coat_IOR, coat_roughness_vector_out, coat_normal, coat_tangent_out, 0, 0, coat_bsdf_out);
            BSDF metal_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            BSDF specular_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            specular_bsdf_out.thickness = thin_film_thickness;
            specular_bsdf_out.ior = thin_film_IOR;
            mx_dielectric_bsdf_transmission(V, specular, specular_color, specular_IOR, main_roughness_out, normal, main_tangent_out, 0, 0, specular_bsdf_out);
            BSDF transmission_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            mx_dielectric_bsdf_transmission(V, 1.000000, transmission_color, specular_IOR, transmission_roughness_out, normal, main_tangent_out, 0, 1, transmission_bsdf_out);
            BSDF sheen_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            BSDF translucent_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            BSDF subsurface_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            BSDF selected_subsurface_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            selected_subsurface_bsdf_out.response = lerp(subsurface_bsdf_out.response, translucent_bsdf_out.response, subsurface_selector_out);
            selected_subsurface_bsdf_out.throughput = lerp(subsurface_bsdf_out.throughput, translucent_bsdf_out.throughput, subsurface_selector_out);
            BSDF diffuse_bsdf_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            BSDF subsurface_mix_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            subsurface_mix_out.response = lerp(diffuse_bsdf_out.response, selected_subsurface_bsdf_out.response, subsurface);
            subsurface_mix_out.throughput = lerp(diffuse_bsdf_out.throughput, selected_subsurface_bsdf_out.throughput, subsurface);
            BSDF sheen_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            sheen_layer_out.response = sheen_bsdf_out.response + subsurface_mix_out.response * sheen_bsdf_out.throughput;
            sheen_layer_out.throughput = sheen_bsdf_out.throughput * subsurface_mix_out.throughput;
            BSDF transmission_mix_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            transmission_mix_out.response = lerp(sheen_layer_out.response, transmission_bsdf_out.response, transmission);
            transmission_mix_out.throughput = lerp(sheen_layer_out.throughput, transmission_bsdf_out.throughput, transmission);
            BSDF specular_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            specular_layer_out.response = specular_bsdf_out.response + transmission_mix_out.response * specular_bsdf_out.throughput;
            specular_layer_out.throughput = specular_bsdf_out.throughput * transmission_mix_out.throughput;
            BSDF thin_film_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            thin_film_layer_out.response = lerp(specular_layer_out.response, metal_bsdf_out.response, metalness);
            thin_film_layer_out.throughput = lerp(specular_layer_out.throughput, metal_bsdf_out.throughput, metalness);
            float3 thin_film_layer_attenuated_out_in2_clamped = clamp(coat_attenuation_out, 0.0, 1.0);
            BSDF thin_film_layer_attenuated_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            thin_film_layer_attenuated_out.response = thin_film_layer_out.response * thin_film_layer_attenuated_out_in2_clamped;
            thin_film_layer_attenuated_out.throughput = thin_film_layer_out.throughput * thin_film_layer_attenuated_out_in2_clamped;
            BSDF coat_layer_out = {(float3)0.0,(float3)1.0, 0.0, 0.0};
            coat_layer_out.response = coat_bsdf_out.response + thin_film_layer_attenuated_out.response * coat_bsdf_out.throughput;
            coat_layer_out.throughput = coat_bsdf_out.throughput * thin_film_layer_attenuated_out.throughput;
            shader_constructor_out.color += coat_layer_out.response;
        }

        // Compute and apply surface opacity
        {
            shader_constructor_out.color *= surfaceOpacity;
            shader_constructor_out.transparency = lerp((float3)1.0, shader_constructor_out.transparency, surfaceOpacity);
        }
    }

    out1 = shader_constructor_out;
}

float3 LinearToSRGB(float3 color)
{
    // Approximately pow(color, 1.0 / 2.2)
    return color < 0.0031308 ? 12.92 * color : 1.055 * pow(abs(color), 1.0 / 2.4) - 0.055;
}

float4 main(in VertexData input) : SV_Target
{
    vd = input;

    float3 geomprop_Nworld_out = normalize(vd.normalWorld);
    float3 geomprop_Tworld_out = normalize(vd.tangentWorld);
    surfaceshader SR_default_out = {(float3)0.0,(float3)0.0};
    NG_standard_surface_surfaceshader_100(SR_default_base, SR_default_base_color, SR_default_diffuse_roughness, SR_default_metalness, SR_default_specular, SR_default_specular_color, SR_default_specular_roughness, SR_default_specular_IOR, SR_default_specular_anisotropy, SR_default_specular_rotation, SR_default_transmission, SR_default_transmission_color, SR_default_transmission_depth, SR_default_transmission_scatter, SR_default_transmission_scatter_anisotropy, SR_default_transmission_dispersion, SR_default_transmission_extra_roughness, SR_default_subsurface, SR_default_subsurface_color, SR_default_subsurface_radius, SR_default_subsurface_scale, SR_default_subsurface_anisotropy, SR_default_sheen, SR_default_sheen_color, SR_default_sheen_roughness, SR_default_coat, SR_default_coat_color, SR_default_coat_roughness, SR_default_coat_anisotropy, SR_default_coat_rotation, SR_default_coat_IOR, geomprop_Nworld_out, SR_default_coat_affect_color, SR_default_coat_affect_roughness, SR_default_thin_film_thickness, SR_default_thin_film_IOR, SR_default_emission, SR_default_emission_color, SR_default_opacity, SR_default_thin_walled, geomprop_Nworld_out, geomprop_Tworld_out, SR_default_out);
    material Default_out = SR_default_out;
    // return float4(Default_out.color, 1.0);
    return float4(LinearToSRGB(Default_out.color), 1.0);
}

